-- Event Store ----------------------------------------
CREATE TABLE IF NOT EXISTS events
(
  EVENT_ID bigserial PRIMARY KEY,
  EVENT_NAME TEXT NOT NULL,
  AGGREGATE_ID TEXT NOT NULL,
  AGGREGATE_TYPE TEXT NOT NULL,
  EVENT_PAYLOAD BYTEA NOT NULL,
  OCCURED_ON TIMESTAMP NOT NULL
);

CREATE TABLE IF NOT EXISTS dispatch (
  EVENT_ID bigint REFERENCES events(EVENT_ID) ON DELETE CASCADE,
  TAKEN BOOLEAN DEFAULT FALSE ,
  TIME TIMESTAMP DEFAULT NOW(),

  PRIMARY KEY (EVENT_ID)
);

CREATE OR REPLACE FUNCTION add_to_dispatch() RETURNS TRIGGER AS $$
        BEGIN
          INSERT INTO dispatch (EVENT_ID) VALUES (NEW.EVENT_ID);
          RETURN NEW;
        END;
    $$ LANGUAGE plpgsql;

CREATE TRIGGER to_dispatch
AFTER INSERT ON events
FOR EACH ROW EXECUTE PROCEDURE add_to_dispatch();


-- Aggregate Track -------------------------------------

CREATE TABLE TRACK_TYPE(
  ID SERIAL PRIMARY KEY,
  NAME TEXT NOT NULL UNIQUE
);

insert into track_type (name) values('competition_aftertask');

CREATE TABLE TRACK(
  ID SERIAL PRIMARY KEY,
  START_TIME INTEGER ,
  END_TIME INTEGER ,
  TRACK_ID TEXT UNIQUE NOT NULL,
  TRACK_TYPE INT REFERENCES TRACK_TYPE(ID) ON DELETE CASCADE
);

CREATE TABLE TRACK_DATA(
  ID INT REFERENCES TRACK(ID) ON DELETE CASCADE ,
  TIMESTAMP INTEGER,
  LAT REAL,
  LON REAL,
  ALT SMALLINT ,
  G_SPEED REAL,
  V_SPEED REAL,
  DISTANCE INTEGER ,

  PRIMARY KEY (TIMESTAMP, ID)
);

CREATE INDEX track_data_timestamp_idx
ON track_data
USING btree (timestamp);

CREATE TABLE TRACK_SNAPSHOT(
  ID INT REFERENCES TRACK(ID),
  TIMESTAMP INTEGER ,
  SNAPSHOT TEXT NOT NULL,

  PRIMARY KEY (ID, TIMESTAMP)
);

CREATE TABLE TRACKS_GROUP(
  GROUP_ID TEXT ,
  TRACK_ID INT REFERENCES TRACK(ID) ON DELETE CASCADE ,
  TRACK_LABEL TEXT,

  PRIMARY KEY (GROUP_ID, TRACK_ID)
);

ALTER TABLE race
   ADD COLUMN start_limit_time integer,
   ADD COLUMN end_limit_time integer;
