-- DB schema for gorynych.
-- Here I assume that database has been prepared already.

-- Aggregate Person ---------------------------------------

CREATE TABLE PERSON(
  ID BIGSERIAL PRIMARY KEY,
  NAME TEXT NOT NULL,
  SURNAME TEXT NOT NULL,
  REGDATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  EMAIL TEXT,
  COUNTRY TEXT,
  PERSON_ID TEXT UNIQUE NOT NULL
);

-- Aggregate Contest ------------------------------------

CREATE TABLE CONTEST(
  ID BIGSERIAL PRIMARY KEY,
  CONTEST_ID TEXT UNIQUE NOT NULL,
  TITLE TEXT,
  START_TIME INTEGER ,
  END_TIME INTEGER ,
  TIMEZONE TEXT,
  PLACE TEXT,
  COUNTRY TEXT,
  HQ_LAT REAL,
  HQ_LON REAL
);

CREATE TABLE PARTICIPANT(
  ID BIGINT REFERENCES CONTEST(ID),
  PARTICIPANT_ID TEXT ,
  ROLE TEXT NOT NULL,
  -- for paragliders
  GLIDER TEXT,
  CONTEST_NUMBER TEXT,
  DESCRIPTION TEXT,
  -- person, transport
  TYPE TEXT NOT NULL,

  PRIMARY KEY (ID, PARTICIPANT_ID)
);

-- Aggregate Race --------------------------------------

CREATE TABLE RACE_TYPE(
  ID BIGSERIAL PRIMARY KEY,
  -- opendistance, racetogoal, speedrun etc.
  TYPE TEXT UNIQUE NOT NULL
);
INSERT INTO RACE_TYPE(TYPE) VALUES ('racetogoal'), ('speedrun'),
('opendistance');

CREATE TABLE RACE(
  ID BIGSERIAL PRIMARY KEY,
  RACE_ID TEXT UNIQUE NOT NULL,
  TITLE TEXT,
  START_TIME INTEGER NOT NULL,
  END_TIME INTEGER NOT NULL,
  TIMEZONE TEXT NOT NULL ,
  RACE_TYPE BIGINT REFERENCES RACE_TYPE(ID),
  CHECKPOINTS TEXT NOT NULL,
  AUX_FIELDS TEXT
);

CREATE TABLE PARAGLIDER(
  ID BIGINT REFERENCES RACE(ID) ON DELETE CASCADE ,
  PERSON_ID TEXT NOT NULL,
  CONTEST_NUMBER TEXT,
  COUNTRY TEXT NOT NULL ,
  GLIDER TEXT NOT NULL ,
  TRACKER_ID TEXT ,
  NAME TEXT NOT NULL ,
  SURNAME TEXT NOT NULL ,

  PRIMARY KEY (ID, PERSON_ID)
);


-- Event Store ----------------------------------------
CREATE TABLE IF NOT EXISTS events
(
  EVENT_ID bigserial PRIMARY KEY,
  EVENT_NAME TEXT NOT NULL,
  AGGREGATE_ID TEXT NOT NULL,
  AGGREGATE_TYPE TEXT NOT NULL,
  EVENT_PAYLOAD BYTEA NOT NULL,
  OCCURED_ON TIMESTAMP NOT NULL
);

CREATE TABLE IF NOT EXISTS dispatch (
  EVENT_ID bigint REFERENCES events(EVENT_ID) ON DELETE CASCADE,

  PRIMARY KEY (EVENT_ID)
);

CREATE OR REPLACE FUNCTION add_to_dispatch() RETURNS TRIGGER AS $$
        BEGIN
          INSERT INTO dispatch (EVENT_ID) VALUES (NEW.EVENT_ID);
          RETURN NEW;
        END;
    $$ LANGUAGE plpgsql;

CREATE TRIGGER to_dispatch
AFTER INSERT ON events
FOR EACH ROW EXECUTE PROCEDURE add_to_dispatch();


-- Aggregate Track -------------------------------------

CREATE TABLE TRACK_TYPE(
  ID SERIAL PRIMARY KEY,
  NAME TEXT NOT NULL UNIQUE
);

insert into track_type (name) values('competition_aftertask');

CREATE TABLE TRACK(
  ID SERIAL PRIMARY KEY,
  START_TIME INTEGER ,
  END_TIME INTEGER ,
  TRACK_ID TEXT UNIQUE NOT NULL,
  TRACK_TYPE INT REFERENCES TRACK_TYPE(ID) ON DELETE CASCADE
);

CREATE TABLE TRACK_DATA(
  ID INT REFERENCES TRACK(ID) ON DELETE CASCADE ,
  TIMESTAMP INTEGER,
  LAT REAL,
  LON REAL,
  ALT SMALLINT ,
  G_SPEED REAL,
  V_SPEED REAL,
  DISTANCE INTEGER ,

  PRIMARY KEY (TIMESTAMP, ID)
);

CREATE INDEX track_data_timestamp_idx
ON track_data
USING btree (timestamp);

CREATE TABLE TRACK_SNAPSHOT(
  ID INT REFERENCES TRACK(ID),
  TIMESTAMP INTEGER ,
  SNAPSHOT TEXT NOT NULL,

  PRIMARY KEY (ID, TIMESTAMP)
);

CREATE TABLE TRACKS_GROUP(
  GROUP_ID TEXT ,
  TRACK_ID INT REFERENCES TRACK(ID) ON DELETE CASCADE ,

  PRIMARY KEY (GROUP_ID, TRACK_ID)
);
